#!/usr/local/bin/bash
#set -x
# tested with FreeBSD 10.3

LETSENCRYPT="/usr/local/bin/letsencrypt"
LEROOT="/usr/local/etc/letsencrypt"
OPENSSL="/usr/bin/openssl"
X509OPTS="x509 -dates -email -issuer -subject -serial -noout -in"
#
WEBSERVER="apache"
#APACHE="apache24"
APACHECTL="/usr/local/sbin/apachectl"
APACHESTATUS="$APACHECTL status"
#APACHESTATUS="/usr/local/etc/rc.d/$APACHE status"
APACHESTOP="$APACHECTL -k graceful-stop"
#APACHESTOP="/usr/local/etc/rc.d/$APACHE gracefulstop"
APACHERESTART="$APACHECTL -k graceful"
#APACHESTART="/usr/local/etc/rc.d/$APACHE graceful"
#
MAILSERVER="postfix"

[ -f /etc/le-utils ] && . /etc/le-utils
[ -f ~/.le-utils ] && . ~/.le-utils


USAGE="$(basename "$0") [-h|--help] [-l|--list] [-e|--expire] [-d|--days=NoOfDays] [-r|--raw] [-s|--silent]
      [-c|--renew] [-n|--dryrun] [-a|--all|<domain>] -- Letsencrypt certificates management

Where:
    -h --help            show this help
    -l --list            list domains
    -e --expire          show number of days till certificate expires
    -d --days=NoOfDays   with -e list certificates that will expire in period of NoOfDays
    -r --raw             show raw openssl output
    -s --silent          with -e only report number of days to expire
    -c --renew           renew cerficates (Note 2,3)
    -n --dryrun          with -c dry run only
    -a --all             check all domains
    <domain>             check domain (Note 1)

Examples:
Show information about all domains
# lectl -a
Show raw output of openssl x509 command for example.com
# lectl -r example.com
List all certificates that will expire in less then 30 days
# lectl -e -d=30 -a
Dry run renewal of all certificates (run daily in cron for feedback)
# lectl -n -c -a

Note 1: Renewal of single ceritificate
# /usr/local/bin/letsencrypt renew  --dry-run -d example.com
Currently, the renew verb is only capable of renewing all installed
certificates that are due to be renewed; individual domains cannot be
specified with this action. If you would like to renew specific
certificates, use the certonly command. The renew verb may provide
other options for selecting certificates to renew in the future.

Note 2: Rate Limits for Letâ€™s Encrypt
https://community.letsencrypt.org/t/rate-limits-for-lets-encrypt
* limited to 20 certificates per domain per week
* limited to 5 certificates per FQDN set per week
* the number of registrations you can make in a given time period;
  currently 500 per 3 hours

Note 3: Lifetime of the certificate (Pros and cons of 90-day
certificate lifetimes)
https://community.letsencrypt.org/t/pros-and-cons-of-90-day-certificate-lifetimes
The Technical Advisory Board chose
* 90-day certificate lifetime to start with
* with an expectation that people will want to auto-renew at the
  60-day mark."


EXPECTED_ARGS=1
if [ $# -lt $EXPECTED_ARGS ]; then
    echo "$USAGE"
    exit
fi

function le-mode {
    case $MODE in
        1)
            (($ALLDOMAINS)) && le-cert-info-all || le-cert-info
            ;;
        2)
	    le-webserver-stop
            le-cert-renew
	    le-webserver-restart
            ;;
        *)
	    printf "[ERR] lectl: Unknown mode: $MODE\n"
            exit
            ;;
    esac
}

function bsd-date {
    BSDDATE=$(LC_ALL=C date -j -f "%b %d %T %Y %Z" "$DATE")
    BSDSEC=$(LC_ALL=C date -j -f "%b %d %T %Y %Z" "$DATE" "+%s")
    EXPSEC=$(($BSDSEC - $(LC_ALL=C date +%s)))
    EXPDAYS=$(($EXPSEC / 86400))
}

function le-cert-info-all {
    for DOMAIN in $DOMAINS; do
	le-cert-info
    done
}

function le-cert-info {
    if  LOG=$(LC_ALL=C $OPENSSL $X509OPTS $LEROOT/live/$DOMAIN/fullchain.pem 2>&1); then
	if [[ $RAW = 1 ]]; then
	    printf "$LOG\n"
	else
	    NOTBEFORE=$(printf "${LOG}" | grep notBefore= | cut -d= -f 2)
	    NOTAFTER=$(printf "${LOG}" | grep notAfter= | cut -d= -f 2)
	    ISSUER=$(printf %s "${LOG}" | grep issuer= | cut -d= -f 2-99)
	    SUBJECT=$(printf "${LOG}" | grep subject= | cut -d= -f 2-99)
	    SERIAL=$(printf "${LOG}" | grep serial= | cut -d= -f 2)
	    if [[ $EXPIRE = 1 ]]; then
		DATE=$NOTAFTER; bsd-date
		[ $EXPDAYS -lt $DAYS ] && printf "$EXPDAYS"
		[ $EXPDAYS -lt $DAYS ] && (($VERBOSE)) && printf " days to the expiration of $DOMAIN\n"
	    else
		printf "[$NOTBEFORE] [$NOTAFTER] [$ISSUER] [$SUBJECT]\n"
	    fi
	fi
    else
	printf "[ERR] $LOG"
    fi
}

function le-cert-renew {
# (($ALLDOMAINS)) && $LETSENCRYPT renew $DRYRUN || $LETSENCRYPT renew $DRYRUN -d $DOMAIN
(($ALLDOMAINS)) && $LETSENCRYPT renew $DRYRUN || printf "|Renewal of single certificate not available atm\n"
#    if  LOG=$($LETSENCRYPT renew $DRYRUN  2>&1); then
#	printf "[OK] $LOG"
#    else
#	printf "[ERR] $LOG"
#    fi
}

# TODO: WEBSERVERRUNNING 0/1
function le-webserver-status {
    case $WEBSERVER in
        apache|APACHE)
            $APACHESTATUS
            ;;
        *)
	    printf "[ERR] lectl: Unknown webserver: $WEBSERVER\n"
            exit
            ;;
    esac
}

function le-webserver-stop {
    case $WEBSERVER in
        apache|APACHE)
            if  LOG=$($APACHESTOP 2>&1); then
		(($VERBOSE)) && printf "$WEBSERVER stopped\n"
	    else
		printf "[ERR] lectl: Stop of $WEBSERVER failed\n"
		printf "[ERR] lectl: $LOG\n"
		exit 99
	    fi
            ;;
        *)
	    printf "[ERR] lectl: Unknown webserver: $WEBSERVER\n"
            exit 99
            ;;
    esac
}

function le-webserver-restart {
    case $WEBSERVER in
        apache|APACHE)
            if  LOG=$($APACHERESTART 2>&1); then
		(($VERBOSE)) && printf "$WEBSERVER restarted\n"
	    else
		printf "[ERR] lectl: Restart of $WEBSERVER failed\n"
		printf "[ERR] lectl: $LOG\n"
		exit 99
	    fi
            ;;
        *)
	    printf "[ERR] lectl: Unknown webserver: $WEBSERVER\n"
            exit 99
            ;;
    esac
}


MODE=1 # 1-info 2-renew
ALLDOMAINS=0
VERBOSE=1
EXPIRE=0
RAW=0
DRYRUN=""
DAYS=999999
DOMAINS=$(cd $LEROOT/live; ls -1)
for i in "$@"; do
    case $i in
        -h|--help)
            echo "$USAGE"
            exit
            ;;
        -l|--list)
            printf "$DOMAINS\n"
            exit
            ;;
	-e|--expire)
	    EXPIRE=1
	    ;;
	-d=*|--days=*)
	    DAYS="${i#*=}"
	    ;;
        -r|--raw)
            RAW=1
            ;;
        -s|--silent)
            VERBOSE=0
            ;;
        -c|--renew)
	    MODE=2
            ;;
        -n|--dryrun)
            DRYRUN=" --dry-run"
            ;;
        -a|--all)
	    ALLDOMAINS=1
	    le-mode
            ;;
        *)
            if [[ $DOMAINS =~ $i ]] ; then
                DOMAIN=$i
		ALLDOMAINS=0
                le-mode
            else
                printf "[ERR] lectl: Unknown domain $i\n"
            fi
            ;;
    esac
done

exit
