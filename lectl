#!/usr/local/bin/bash
#set -x

VERSION="0.3.7-CURRENT"
# VERSION="0.3.6"

LETSENCRYPT="/usr/local/bin/certbot"
LESERVER="--standalone"
LEROOT="/usr/local/etc/letsencrypt"
LEROOTMTIMEPRESERVE="1"
LEOWNER="root"
LEGROUP="wheel"
LEPRIVDIRS="accounts keys live"
LEPRIVDIRMOD="0700"
LEPRIVKEYMOD="0600"
LEHOOKSPRE="/usr/local/etc/letsencrypt/renewal-hooks/pre"
LEHOOKSPOST="/usr/local/etc/letsencrypt/renewal-hooks/post"
#
OPENSSL="/usr/bin/openssl"
X509ITEMS="x509 -dates -email -issuer -subject -serial -noout -in"
#
#WEBSERVER="NONE"
WEBSERVER="APACHE"
APACHECTL="/usr/local/sbin/apachectl"
APACHESTATUS="$APACHECTL status"
APACHESTOP="$APACHECTL -k graceful-stop"
APACHERESTART="$APACHECTL -k graceful"
#APACHE="apache24"
#APACHESTATUS="/usr/local/etc/rc.d/$APACHE status"
#APACHESTOP="/usr/local/etc/rc.d/$APACHE gracefulstop"
#APACHESTART="/usr/local/etc/rc.d/$APACHE graceful"
#
MAILSERVER="NONE"
#MAILSERVER="postfix"
#
LOGTOFILE="1"
LOGFILE="/var/log/le-utils"

[ -f /etc/le-utils ] && . /etc/le-utils
[ -f /usr/local/etc/le-utils ] && . /usr/local/etc/le-utils
[ -f ~/.le-utils ] && . ~/.le-utils
[ -f ./.le-utils ] && . ./.le-utils

USAGE="
lectl [-V|--version] [-h|--help] [-s|--silent] [-d|--debug]
      [-l|--list] [-r|--raw]
      [-p|--permissions]
      [-e|--expire] [-D=NoOfDays|--Days=NoOfDays]
      [-c|--renew] [-n|--dryrun] [-a|--all|<CN>]
      -- Letsencrypt certificates management

where:
 -V --version ....... print version end exit
 -h --help .......... show this help and exit
 -l --list .......... list domains and exit
 -r --raw ........... print raw output of openssl x509 command
 -p --permissions ... set permissions (Note 5)
 -e --expire ........ show number of days till certificate expires
 -D --Days=NoOfDays . with -e list certificates that will expire in period of NoOfDays
 -s --silent ........ print errors only; with -e only report number of days to expire
 -d --debug ......... print debug output
 -c --renew ......... renew cerficates (Note 2,3,6)
 -n --dryrun ........ with -c dry run only
 -a --all ........... all domains
 <CN> ............... domain (Note 1)

Examples:
Print information about all certificates.
# lectl -a
Print raw output of openssl x509 command for a certificate
# lectl -r example.com
List all certificates that will expire in less then 30 days.
# lectl -e --Days=30 -a
Dry run renewal of all certificates (run daily in cron for feedback).
# lectl -n -c -a
Dry run renewal of a certificate.
# lectl -n -c example.com
Renew all certificates that expire in less then 30 days
# lectl -D=30 -c -a
Renew a certificate if it expires in less then 30 days
# lectl -D=30 -c example.com
Set permissions of private keys to $PRIVKEYMOD
# lectl -p

Notes https://letsencrypt.org/docs/rate-limits/
1) lectl uses certonly command. Renewal of single ceritificate
# /usr/local/bin/letsencrypt(certbot) renew --dry-run -d example.com
Currently (0.25.1), the renew verb is only capable of renewing all
installed certificates that are due to be renewed.
2) Rate Limits for Letâ€™s Encrypt
https://community.letsencrypt.org/t/rate-limits-for-lets-encrypt
* limited to 20 certificates per domain per week
* limited to 5 certificates per FQDN set per week
* the number of registrations you can make in a given time period;
  currently 500 per 3 hours
3) Lifetime of the certificate (Pros and cons of 90-day
certificate lifetimes)
https://community.letsencrypt.org/t/pros-and-cons-of-90-day-certificate-lifetimes
The Technical Advisory Board chose
* 90-day certificate lifetime to start with
* with an expectation that people will want to auto-renew at the
  60-day mark.
4) Certobot will not renew a certificate more then 30 days before
expiration. Message: Cert not yet due for renewal.
5) Set permissions of all private keys to $LEPRIVKEYMOD and set
permissions of: $LEPRIVDIRS in $LEROOT to $LEPRIVDIRMOD .
6) File with the name of the coresponding domain will be run from the
directory LEHOOKSPOST after the renewal of the domain."

# ERR  Description
# 101  Renewal of certificate failed.
# 102  Unknown webserver
# 103  Webserver failed to restart
# 104  Set Permissions of private keys failed
# 105  Set Permissions of private directory failed
# 106  Domain renewal post-hook failed

EXPECTED_ARGS=1
if [[ $# -lt $EXPECTED_ARGS ]]; then
    echo "$USAGE"
    exit
fi

function log-ok {
    (($VERBOSE)) && printf "[OK]  lectl: $MESSAGE\n"
    (($LOGTOFILE)) && printf "`date "+%F %T"` [OK]  lectl: $MESSAGE\n" >> $LOGFILE
}
function log-dbg {
    if [[ $DEBUG -eq 1 ]]; then
	printf "[DBG] lectl: $MESSAGE\n"
	(($LOGTOFILE)) && printf "`date "+%F %T"` [DBG] lectl: $MESSAGE\n" >> $LOGFILE
    fi
}
function log-err {
    printf "[ERR] lectl: $MESSAGE\n"
    (($LOGTOFILE)) && printf "`date "+%F %T"` [ERR] lectl: $MESSAGE\n" >> $LOGFILE
}

function print-config {
    printf "[DBG] lectl: >>> CONFIG\n"
    printf "[DBG] lectl: LETSENCRYPT: $LETSENCRYPT\n"
    printf "[DBG] lectl: LEROOT: $LEROOT\n"
    printf "[DBG] lectl: LEHOOKSPRE: $LEHOOKSPRE\n"
    printf "[DBG] lectl: LEHOOKSPOST: $LEHOOKSPOST\n"
    printf "[DBG] lectl: LEROOTMTIMEPRESERVE: $LEROOTMTIMEPRESERVE\n"
    printf "[DBG] lectl: OPENSSL: $OPENSSL\n"
    printf "[DBG] lectl: X509OPTS: $X509OPTS\n"
    printf "[DBG] lectl: LOGFILE: $LOGFILE\n"
    printf "[DBG] lectl: WEBSERVER: $WEBSERVER\n"
    printf "[DBG] lectl: MAILSERVER: $MAILSERVER\n"
    printf "[DBG] lectl: MODE: $MODE\n"
    printf "[DBG] lectl: ALLDOMAINS: $ALLDOMAINS\n"
    printf "[DBG] lectl: VERBOSE: $VERBOSE\n"
    printf "[DBG] lectl: DEBUG: $DEBUG\n"
    printf "[DBG] lectl: EXPIRE: $EXPIRE\n"
    printf "[DBG] lectl: RAW: $RAW\n"
    printf "[DBG] lectl: DRYRUN: $DRYRUN\n"
    printf "[DBG] lectl: DAYS: $DAYS\n"
    printf "[DBG] lectl: DOMAINS: $DOMAINS\n"
    printf "[DBG] lectl: LEOWNER: $LEOWNER\n"
    printf "[DBG] lectl: LEGROUP: $LEGROUP\n"
    printf "[DBG] lectl: LEPRIVDIRS: $LEPRIVDIRS\n"
    printf "[DBG] lectl: LEPRIVDIRMOD: $LEPRIVDIRMOD\n"
    printf "[DBG] lectl: LEPRIVKEYMOD: $LEPRIVKEYMOD\n"
    printf "[DBG] lectl: <<< CONFIG\n"
}

function le-main {
    (($DEBUG)) && print-config
    case $MODE in
        1)  # info
            (($ALLDOMAINS)) && le-cert-info-all || le-cert-info
            ;;
        2)  # renewal
            le-cert-renew
            ;;
        *)
	    MESSAGE=" line: $LINENO; Unknown mode: $MODE"; log-err
            exit
            ;;
    esac
}

function bsd-date {
    BSDDATE=$(LC_ALL=C date -j -f "%b %d %T %Y %Z" "$DATE")
    BSDSEC=$(LC_ALL=C date -j -f "%b %d %T %Y %Z" "$DATE" "+%s")
    EXPSEC=$(($BSDSEC - $(LC_ALL=C date +%s)))
    EXPDAYS=$(($EXPSEC / 86400))
}

function le-cert-info-all {
    for DOMAIN in $DOMAINS; do
	le-cert-info
    done
}

function le-cert-data {
    if  LOG=$(LC_ALL=C $OPENSSL $X509ITEMS $LEROOT/live/$DOMAIN/fullchain.pem 2>&1); then
	NOTBEFORE=$(printf "${LOG}" | grep notBefore= | cut -d= -f 2)
	NOTAFTER=$(printf "${LOG}" | grep notAfter= | cut -d= -f 2)
	ISSUER=$(printf %s "${LOG}" | grep issuer= | cut -d= -f 2-99)
	SUBJECT=$(printf "${LOG}" | grep subject= | cut -d= -f 2-99)
	SERIAL=$(printf "${LOG}" | grep serial= | cut -d= -f 2)
	DATE=$NOTAFTER; bsd-date
    else
	MESSAGE=" le-cert-data: line: $LINENO; $LOG"; log-err
    fi
}

function le-cert-info {
    le-cert-data
    if [[ $RAW -eq 1 ]]; then
	printf "$LOG\n"
    else
	if [[ $EXPIRE -eq 1 ]]; then
	    MESSAGE=" le-cert-info: $DOMAIN NOTAFTER=$NOTAFTER EXPDAYS=$EXPDAYS"; log-dbg
	    [[ $EXPDAYS -lt $DAYS ]] && printf "%d" "$EXPDAYS"
	    [[ $EXPDAYS -lt $DAYS ]] && (($VERBOSE)) && printf " days to the expiration of $DOMAIN\n"
	else
	    printf "[$NOTBEFORE] [$NOTAFTER] [$ISSUER] [$SUBJECT]\n"
	fi
    fi
}

function le-cert-renew-domain-hook-post {
    if [[ -z $DRYRUN ]]; then
	if [[ -e $LEHOOKSPOST/$DOMAIN ]]; then
	    MESSAGE=" Running $LEHOOKSPOST/$DOMAIN"; log-ok
	    if LOG=$($LEHOOKSPOST/$DOMAIN 2>&1); then
		[[ ! -z $LOG ]] && (MESSAGE=" Log: \n$LOG"; log-ok)
		MESSAGE=" $LEHOOKSPOST/$DOMAIN finished"; log-ok
	    else
		MESSAGE=" [106] le-cert-renew-domain-hook-post: line: $LINENO; $LECMD; error: $?"; log-err
		MESSAGE=" Log: \n$LOG"; log-err
	    fi
	fi
    fi
}

function le-cert-renew-domain {
    le-cert-data
    MESSAGE=" le-cert-renew-domain: le-cert-data: $DOMAIN:\n$LOG"; log-dbg
    if [[ $EXPDAYS -lt $DAYS ]]; then
	MESSAGE=" $DOMAIN expires in $EXPDAYS days. Due for renewal."; log-ok
        LECMD="$LETSENCRYPT certonly $LESERVER $LEQUIET $DRYRUN -d $DOMAIN"
	if LOG=$($LECMD 2>&1); then
	    [[ ! -z $LOG ]] && (MESSAGE=" Log: \n$LOG"; log-ok)
	    MESSAGE=" Renewal of $DOMAIN finished. Check the permissions, or run: lectl -p"; log-ok
	    le-cert-renew-domain-hook-post
	else
	    MESSAGE=" [101] le-cert-renew-domain: line: $LINENO; $LECMD; error: $?"; log-err
	    MESSAGE=" Log: \n$LOG"; log-err
	fi
    else
	MESSAGE=" $DOMAIN expires in $EXPDAYS days. No renewal this time."; log-ok
    fi
}

function le-cert-renew-hook-pre {
    if (( $LEROOTMTIMEPRESERVE )) && [[ ! -z $DRYRUN ]]; then
	LEROOTMDATE=$(stat -f %m $LEROOT)
	# Linux: stat -c %Y $LEROOT
	MESSAGE=" LEROOTMDATE=$LEROOTMDATE stored"; log-ok
    fi
}

function le-cert-renew-hook-post {
    if (( $LEROOTMTIMEPRESERVE )) && [[ ! -z $DRYRUN ]]; then
	touch -d `date -r $LEROOTMDATE "+%Y-%m-%dT%H:%M:%S"` $LEROOT
	# Linux: touch -d @$LEROOTMDATE $LEROOT
	MESSAGE=" LEROOTMDATE=$LEROOTMDATE restored"; log-ok
    fi
}

function le-cert-renew {
    le-cert-renew-hook-pre
    # TODO: stop and restart webserver only if needed
    le-webserver-status
    le-webserver-stop
    if [[ $ALLDOMAINS -eq 0 ]]; then
	le-cert-renew-domain
    else
	for DOMAIN in $DOMAINS; do
	    le-cert-renew-domain
	done
    fi
    le-cert-renew-hook-post
    le-webserver-restart
}

function le-webserver-status {
    RESTART=0
    case $WEBSERVER in
        none|NONE)
        ;;
        apache|APACHE)
	    if [[ -e $APACHECTL ]]; then
		if LOG=$($APACHESTATUS 2>&1); then
		    MESSAGE=" $WEBSERVER status: $LOG"; log-ok
		    if LOG=$(echo $LOG | grep "is running"); then
			RESTART=1
			MESSAGE=" RESTART=$RESTART"; log-dbg
		    fi
		else
		    MESSAGE=" le-webserver-status; line: $LINENO; Status of $WEBSERVER failed"; log-err
		    MESSAGE=" le-webserver-status: $LOG"; log-err
		fi
	    else
		MESSAGE=" le-webserver-status; line: $LINENO; Can't find $APACHECTL. Set WEBSERVER to NONE, if no webserver is installed."; log-err
	    fi
            ;;
        *)
	    MESSAGE=" le-webserver-status; line: $LINENO; Unknown webserver: $WEBSERVER"; log-err
            exit 102
            ;;
    esac
}

function le-webserver-stop {
    case $WEBSERVER in
        none|NONE)
	    MESSAGE=" Webserver: $WEBSERVER"; log-ok
            ;;
        apache|APACHE)
	    if [[ -e $APACHECTL ]]; then
		if [[ $RESTART -eq 1 ]]; then
		    if  LOG=$($APACHESTOP 2>&1); then
			MESSAGE=" $WEBSERVER stopped"; log-ok
		    else
			MESSAGE=" le-webserver-stop; line: $LINENO; Stop of $WEBSERVER failed"; log-err
			MESSAGE=" le-webserver-stop: $LOG"; log-err
		    fi
		fi
	    else
		MESSAGE=" le-webserver-stop; line: $LINENO; Can't find $APACHECTL. Set WEBSERVER to NONE, if no webserver is installed."; log-err
	    fi
            ;;
        *)
	    MESSAGE=" le-webserver-stop; line: $LINENO; Unknown webserver: $WEBSERVER"; log-err
	    exit 102
            ;;
    esac
}

function le-webserver-restart {
    case $WEBSERVER in
        none|NONE)
        ;;
        apache|APACHE)
    	    if [[ -e $APACHECTL ]]; then
		if [[ $RESTART -eq 1 ]]; then

		    if  LOG=$($APACHERESTART 2>&1); then
			MESSAGE=" $WEBSERVER restarted"; log-ok
		    else
			MESSAGE=" le-webserver-restart; line: $LINENO; Restart of $WEBSERVER failed"; log-err
			MESSAGE=" le-webserver-restart: $LOG"; log-err
			exit 103
		    fi
		fi
	    else
		MESSAGE=" le-webserver-restart; line: $LINENO; Can't find $APACHECTL. Set WEBSERVER to NONE, if no webserver is installed."; log-err
	    fi
            ;;
        *)
	    MESSAGE=" le-webserver-restart; line: $LINENO; Unknown webserver: $WEBSERVER"; log-err
            exit 102
            ;;
    esac
}

function le-cert-permissions {
    for i in $LEPRIVDIRS; do
        if  LOG=$(chmod $LEPRIVDIRMOD $LEROOT/$i); then
	    MESSAGE=" Permissions of $LEROOT/$i set to $LEPRIVDIRMOD"; log-ok
	else
	    MESSAGE=" le-cert-permissions; line: $LINENO; Set permissions of $LEROOT/$i failed"; log-err
	    MESSAGE=" le-cert-permissions: $LOG"; log-err
	    exit 105
	fi
    done
    if  LOG=$(find $LEROOT -name "privkey*" -exec chmod $LEPRIVKEYMOD {} \;); then
	MESSAGE=" Permissions of private keys set to $LEPRIVKEYMOD"; log-ok
    else
	MESSAGE=" le-cert-permissions; line: $LINENO; Set Permissions of private keys failed"; log-err
	MESSAGE=" le-cert-permissions: $LOG"; log-err
	exit 104
    fi
}

MODE=1           # 1-info   2-renew
ALLDOMAINS=0     # 1-all domains, 0-single domain
VERBOSE=1        # 0-silent
LEQUIET=""
DEBUG=0
EXPIRE=0
RAW=0
DRYRUN=""
DAYS=999999
DOMAINS=$(cd $LEROOT/live; ls -1)
for i in "$@"; do
    case $i in
        -V|--version)
	    printf "$VERSION\n"
            exit
            ;;
        -h|--help)
            printf "$USAGE\n"
            exit
            ;;
        -l|--list)
            printf "$DOMAINS\n"
            exit
            ;;
	-e|--expire)
	    EXPIRE=1
	    ;;
	-D=*|--Days=*)
	    DAYS=${i#*=}
	    ;;
        -r|--raw)
            RAW=1
            ;;
        -s|--silent)
            VERBOSE=0
	    LEQUIET="--quiet"
            ;;
        -d|--debug)
            DEBUG=1
            ;;
        -c|--renew)
	    MODE=2
            ;;
        -n|--dryrun)
            DRYRUN="--dry-run"
            ;;
        -p|--permissions)
	    le-cert-permissions
            ;;
        -a|--all)
	    ALLDOMAINS=1
	    le-main
            ;;
        *)
            if [[ $DOMAINS =~ $i ]]; then
                DOMAIN=$i
		ALLDOMAINS=0
                le-main
            else
                MESSAGE=" Unknown domain $i"; log-err
            fi
            ;;
    esac
done

exit 0

# EOF
